3. Typescript에서 Argument, Return이 Object일 때 : Interface로 유효성 검사를 함

interface Human {
    name:string,
    age:number,
    gender:string
}

const person = {
    name: 'chin',
    age: 29,
    gender:string
}

const sayHi = (person:Human):string => {
    return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}`;
}

const hi = sayHi(person);

console.log(hi);


// 위의 타입을 매개할 I/F는 JS에서 작동하지 않음 (거의 유일)
// 위에서처럼 Object의 타입을 정의할 때는 I/F를 사용하여 커스텀 타입을 체크해줘야 한다.

// Object는 객체이므로 Java에서 I/F로 implements한 class의 객체들을 받을 수 있는걸 생각하면 편하다.
// Java에서 객체들을 묶거나 매개할 때 Super Class나 Interface를 활용하는걸 생각

// 대신 TS에서는 타입 생성고 내부 속성과 메서드의 내부타입체크를 통해 매개한다고 생각


==========================================================================================================

4. TS에서 class : I/F 가 생긴만큼 그리고 I/F가 JS에서 안 먹히는 만큼 더 강화됨

>> 클래스가 가져야할 속성들과 + 그 속성들의 권한을 설정해야함

>> JS에서는 없던 접근지정자 public과 private가 생김
>> constructor(인스턴스 생성시 실행되는 메서드)를 만들때도 진짜 매우 Java스럽게 변한다. (멤버변수 선언방식이)

class Person {
    public name: string;
    public age: number;
    public gender: string;

    constructor(name:string, age:number, gender:string) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }
}

>> 정말 많이 Java스러워짐

>> 그럼 Java와 같은 원리로 위의 interface를 implements하면 해당 클래스로 생성된 Object 인스턴스는
>> Person으로 타입체크를 하거나 아님 상위 Human으로 타입체크가 되겠지 (이는 여러 클래스들의 타입체크를 통괄하기 위해 I/F가 쓰일 수 있는 Java스러운 원리)'

class Person implements Human {
    public name: string;
    public age: number;
    public gender: string;

    constructor(name:string, age:number, gender:string) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }
}

const person = new Person('chin', 29, 'male');

하면 function sayHi(person:Person)으로 하거나 좀 더 포괄적으로 function sayHi(person:Human) 이 가능

거기에 접근 지정자가 있으므로 private를 통한 캡슐화 보안이 가능

class Person implements Human {
    public name: string;
    public age: number;
    public gender: string; // 인터페이스에서 지정된 멤버변수들은 implements 한 상태에서는 public 밖에 안된다.

    private age2: number;
    private gender2: string;

    constructor(name:string, age:number, gender:string) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    get getAge():number {
        return this.age;
    }
    
    get getGender():string {
        return this.gender;
    }
}

로 get/setter를 이용하게 할 수 있음 물론 함수도 변형해야함

const sayHi(person:Person)... {
    return `Hello ${person.name}, you are ${person.getAge}, you are a ${person.getGender}`;
}

private는 상속 및 외부객체 접근 불가
public / protected는 상속 가능 protected는 외부객체 접근 불가

문제는 class가 I/F를 implements할 경우 TS에서는 I/F가 접근지정자 설정이 안되고 public 상태이므로 I/F와 호환되는 멤버변수들이 무조건 public이어야함 (그 외 멤버변수에게는 지정가능)
>> 어차피 get/set을 이용하려면 I/F에 없는 메서드를 사용해야 하므로 타입체크를 무조건 클래스로 하게 되어있다.★



근데 node, react 등에서는 I/F보다는 class를 만들게 됨 (왜냐하면 JS에 가져올 수 있어야 하므로 >> React 빌드 결과물 상 JS로 구동되는데 I/F는 없으니 안되잖)