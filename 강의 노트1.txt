1. Typescript의 특징 1 : 함수 실행시 argument 유무 체크

TS는 Typed Langauge : 변수와 데이터의 Type(Number, String, Boolean, Array, Object 등)을 지정해줘야함


const name = 'chin', age = 29, gender = 'male';

const sayHi = (name, age, gender) => {
    console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);
}

sayHi(name, age, gender);

//만약 sayHi(name, age); 이렇게 파라미터를 맞추지 않으면 컴파일에러가 발생 (JS는 그런거 없이 자유로움 그래서 default param같은게 있지)
★★★
//대신 함수 정의부에서 gender? 로 question mark를 붙이며 name과 age만으로 돌아감 >> gender?는 gender 파라미터가 선택적으로 들어감을 알려줌
//아님 es6의 default param도 물론 먹히기에 이를 적용하면 컴파일 에러는 뜨지 않는다.

export{}; // 파일이 모듈화된다는걸 이렇게 언급해줘야 위의 선언에 에러가 안 남 (TS 법칙)


===================================================================================================================================

2. Typescript 특징2 : argument와 return의 Type검사 >> Typescript인 이유 

const name = 'chin', age = 29, gender = 'male';

const sayHi = (name:string, age:number, gender:string): void => {
    console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);
}

sayHi(name, age, gender);
// 만약 타입 지정이 안되어 있다면 셋 다 any any any => void(Java처럼 리턴이 없는 경우 표현)로 표시됨을 알 수 있음
// 위에서처럼 함수 선언부 파라미터에 변수명:타입(소문자) 로 지정하면 함수 실행에 커서를 올릴 때 해당 타입들을 확인 할 수 있음 (유용)
// 위에서처럼 타입을 지정하면 age 부분에 '29'를 넣을 시 에러가 뜸

// 또한 함수 정의부에서 파라미터 뒷부분에 리턴이 없으면 :void, 리턴값이 있음 :해당타입으로 리턴타입까지 지정이 가능하다.    

export{};


>>> 이런식으로 TS는 코드의 예측을 쉽게 해준다